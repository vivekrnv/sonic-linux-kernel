From 98ce351fa6a36692005d5e1f9070941ea22a6650 Mon Sep 17 00:00:00 2001
From: Ashwin H <Ashwin.H@amd.com>
Date: Wed, 5 Jul 2023 10:29:59 +0000
Subject: [PATCH 29/30] arm64: traps: Handle SError interrupt

On Elba, an access to an invalid bus address results in a Decode SError
that will panic the kernel. Bugs in the HAL that cause these are very
hard to debug, so trap these and if coming from user space, turn the
Decode Error into SIGBUS. Otherwise, if coming from the kernel, ignore.

Signed-off-by: David Clear <dac2@pensando.io>
Signed-off-by: Ashwin H <Ashwin.H@amd.com>
---
 arch/arm64/include/asm/traps.h | 1 +
 arch/arm64/kernel/traps.c      | 8 ++++++++
 2 files changed, 9 insertions(+)

diff --git a/arch/arm64/include/asm/traps.h b/arch/arm64/include/asm/traps.h
index d96dc2c7c..dc929a6c5 100644
--- a/arch/arm64/include/asm/traps.h
+++ b/arch/arm64/include/asm/traps.h
@@ -29,6 +29,7 @@ void arm64_notify_segfault(unsigned long addr);
 void arm64_force_sig_fault(int signo, int code, void __user *addr, const char *str);
 void arm64_force_sig_mceerr(int code, void __user *addr, short lsb, const char *str);
 void arm64_force_sig_ptrace_errno_trap(int errno, void __user *addr, const char *str);
+int platform_serror(struct pt_regs *regs, unsigned int esr);
 
 /*
  * Move regs->pc to next instruction and do necessary setup before it
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 2059d8f43..d60c3068b 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -870,8 +870,16 @@ bool arm64_is_fatal_ras_serror(struct pt_regs *regs, unsigned int esr)
 	}
 }
 
+int __weak platform_serror(struct pt_regs *regs, unsigned int esr)
+{
+	return 0;
+}
+
 asmlinkage void noinstr do_serror(struct pt_regs *regs, unsigned int esr)
 {
+	if (platform_serror(regs, esr))
+		return;
+
 	arm64_enter_nmi(regs);
 
 	/* non-RAS errors are not containable */
-- 
2.17.1

