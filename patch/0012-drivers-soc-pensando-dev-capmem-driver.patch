From 445d91826b70df3c5091b2206a8eac18f185f9e9 Mon Sep 17 00:00:00 2001
From: Shantanu Shrivastava <shanshri@amd.com>
Date: Tue, 24 Oct 2023 09:40:49 +0000
Subject: [PATCH] drivers/soc/pensando: /dev/capmem driver

The capmem driver provides an controlled interface for applications
to map memory (in preference to /dev/mem).

Signed-off-by: David Clear <dclear@amd.com>
Signed-off-by: Shantanu Shrivastava <shanshri@amd.com>
---
 arch/arm64/boot/dts/pensando/elba.dtsi |   4 +
 drivers/soc/Makefile                   |   1 +
 drivers/soc/pensando/Kconfig           |   7 +
 drivers/soc/pensando/Makefile          |   6 +
 drivers/soc/pensando/cap_mem.c         | 307 +++++++++++++++++++++++++
 drivers/soc/pensando/capmem_dev.h      |  34 +++
 6 files changed, 359 insertions(+)
 create mode 100644 drivers/soc/pensando/Makefile
 create mode 100644 drivers/soc/pensando/cap_mem.c
 create mode 100644 drivers/soc/pensando/capmem_dev.h

diff --git a/arch/arm64/boot/dts/pensando/elba.dtsi b/arch/arm64/boot/dts/pensando/elba.dtsi
index 6e0248c30..9bc1a71af 100644
--- a/arch/arm64/boot/dts/pensando/elba.dtsi
+++ b/arch/arm64/boot/dts/pensando/elba.dtsi
@@ -49,6 +49,10 @@ pmu {
 				IRQ_TYPE_LEVEL_LOW)>;
 	};
 
+	capmem {
+		compatible = "pensando,capmem";
+	};
+
 	soc: soc {
 		compatible = "simple-bus";
 		#address-cells = <2>;
diff --git a/drivers/soc/Makefile b/drivers/soc/Makefile
index 69ba6508c..f96e5efa0 100644
--- a/drivers/soc/Makefile
+++ b/drivers/soc/Makefile
@@ -22,6 +22,7 @@ obj-y				+= mediatek/
 obj-y				+= microchip/
 obj-y				+= pxa/
 obj-y				+= amlogic/
+obj-$(CONFIG_ARCH_PENSANDO)	+= pensando/
 obj-y				+= qcom/
 obj-y				+= renesas/
 obj-y				+= rockchip/
diff --git a/drivers/soc/pensando/Kconfig b/drivers/soc/pensando/Kconfig
index da71e35e9..abe01eac6 100644
--- a/drivers/soc/pensando/Kconfig
+++ b/drivers/soc/pensando/Kconfig
@@ -8,6 +8,13 @@ config ARCH_PENSANDO_ELBA_SOC
 	help
 	  Support for the Pensando Elba SoC
 
+config PENSANDO_SOC_CAPMEM
+	tristate "/dev/capmem driver for the Pensando SoCs"
+	depends on OF
+	default y
+	help
+	  Support for the Pensando SoC memory driver
+
 endmenu
 
 endif
diff --git a/drivers/soc/pensando/Makefile b/drivers/soc/pensando/Makefile
new file mode 100644
index 000000000..fcfb67425
--- /dev/null
+++ b/drivers/soc/pensando/Makefile
@@ -0,0 +1,6 @@
+#
+# Pensando SoC drivers
+#
+CFLAGS_cap_mem.o := -I$(src)
+
+obj-$(CONFIG_PENSANDO_SOC_CAPMEM) += cap_mem.o
diff --git a/drivers/soc/pensando/cap_mem.c b/drivers/soc/pensando/cap_mem.c
new file mode 100644
index 000000000..50997896d
--- /dev/null
+++ b/drivers/soc/pensando/cap_mem.c
@@ -0,0 +1,307 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018-2022, Pensando Systems Inc.
+ */
+
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/module.h>
+#include <linux/miscdevice.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/fcntl.h>
+#include <linux/init.h>
+#include <linux/pagemap.h>
+#include <linux/pfn_t.h>
+#include "capmem_dev.h"
+
+#define DSC_MEM_ATTR_COHERENT	0x1	// Memory range is coherent
+
+/*
+ * Memory range information provided by U-Boot on the kernel commandline:
+ * Syntax:
+ *	start-end:type[,start-end:type]
+ *	    start:  hex start address (no 0x prefix)
+ *	    end:    hex end address (inclusive)
+ *	    type:   address space type: coherent | noncoherent
+ * Eg:
+ *	capmem=c0000000-c3f00000:coherent,c8000000-13fffffff:noncoherent
+ *
+ * Only address ranges specified are allowed to be mapped.
+ */
+static char *ranges;
+#ifdef MODULE
+module_param(ranges, charp, 0);
+#else
+static int __init capmem_setup(char *s)
+{
+	ranges = s;
+	return 0;
+}
+__setup("capmem=", capmem_setup);
+#endif
+
+static struct capmem_range mem_range[CAPMEM_MAX_RANGES];
+static int nmem_ranges;
+
+static int capmem_add_range(uint64_t start, uint64_t len, int type)
+{
+	struct capmem_range *p = &mem_range[nmem_ranges];
+
+	if (nmem_ranges == CAPMEM_MAX_RANGES)
+		return -ENOMEM;
+	p->start = start;
+	p->len = len;
+	p->type = type;
+	++nmem_ranges;
+	return 0;
+}
+
+static int cap_mem_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	size_t size = vma->vm_end - vma->vm_start;
+	phys_addr_t p_start = (phys_addr_t)vma->vm_pgoff << PAGE_SHIFT;
+	phys_addr_t p_end = p_start + size - 1;
+	pgprot_t pgprot = vma->vm_page_prot;
+	int i;
+
+	// range cannot wrap
+	if (p_end <= p_start)
+		return -EINVAL;
+
+	// must be MAP_SHARED
+	if (!(vma->vm_flags & VM_MAYSHARE))
+		return -EINVAL;
+
+	// find permitted range
+	for (i = 0; i < nmem_ranges; i++)
+		if (p_start >= mem_range[i].start &&
+		    p_end < (mem_range[i].start + mem_range[i].len))
+			break;
+	if (i == nmem_ranges)
+		return -EPERM;
+
+	switch (mem_range[i].type) {
+	case CAPMEM_TYPE_DEVICE:
+		/* register space must be device-mapped */
+		pgprot = pgprot_device(pgprot);
+		vma->vm_flags |= VM_IO;
+		break;
+
+	case CAPMEM_TYPE_NONCOHERENT:
+		/*
+		 * An inner shareable cached mapping on a noncoherence range
+		 * is invalid, so only accept non-cached mapping requests.
+		 */
+		if (!(file->f_flags & O_SYNC))
+			return -EINVAL;
+		pgprot = pgprot_writecombine(pgprot);
+		break;
+
+	default:
+		// CAPMEM_TYPE_COHERENT - default inner shareable mapping
+		break;
+	}
+
+	/*
+	 * Clear the RDONLY bit and set the DIRTY bit to bypass the
+	 * kernel's clean/dirty page tracking, which uses a page fault on
+	 * first write behavior, which is undesirable for performance.
+	 */
+	if (vma->vm_flags & VM_WRITE)
+		pgprot = __pgprot_modify(pgprot, PTE_RDONLY, PTE_DIRTY);
+
+	vma->vm_page_prot = pgprot;
+
+	/* Remap-pfn-range will mark the range VM_IO */
+	if (remap_pfn_range(vma,
+			    vma->vm_start,
+			    vma->vm_pgoff,
+			    size,
+			    vma->vm_page_prot)) {
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+
+static long cap_mem_unlocked_ioctl(struct file *file,
+		unsigned int cmd, unsigned long arg)
+{
+	void __user *p = (void __user *)arg;
+	struct capmem_range __user *rp;
+	struct capmem_ranges_args gr;
+	int i;
+
+	switch (cmd) {
+	case CAPMEM_GET_NRANGES:
+		return put_user(nmem_ranges, (int __user *)p);
+
+	case CAPMEM_GET_RANGES:
+		if (copy_from_user(&gr, p, sizeof(gr)))
+			return -EFAULT;
+		rp = (struct capmem_range __user *)gr.range;
+		for (i = 0; i < gr.nranges; i++) {
+			if (i >= nmem_ranges)
+				return i;
+			if (copy_to_user(rp, &mem_range[i], sizeof(*rp)))
+				return -EFAULT;
+			++rp;
+		}
+		return i;
+
+	default:
+		return -ENOTTY;
+	}
+}
+
+const struct file_operations cap_mem_fops = {
+	.owner		= THIS_MODULE,
+	.mmap		= cap_mem_mmap,
+	.unlocked_ioctl	= cap_mem_unlocked_ioctl,
+};
+
+static struct miscdevice cap_mem_dev = {
+	MISC_DYNAMIC_MINOR,
+	CAPMEM_NAME,
+	&cap_mem_fops
+};
+
+static int __init parse_memory_ranges(struct platform_device *pdev, char *s)
+{
+	uint64_t start, end, len;
+	char *p, *q;
+	int r, type;
+
+	if (!s)
+		return 0;
+
+	while ((p = strsep(&s, ",")) != NULL) {
+		if (nmem_ranges == CAPMEM_MAX_RANGES) {
+			dev_err(&pdev->dev, "too many ranges\n");
+			return -ENODEV;
+		}
+		q = strchr(p, ':');
+		if (!q)
+			goto syntax;
+		*q++ = '\0';
+		if (sscanf(p, "%llx-%llx", &start, &end) != 2)
+			goto syntax;
+		if (end <= start)
+			goto syntax;
+		if (strcmp(q, "coherent") == 0)
+			type = CAPMEM_TYPE_COHERENT;
+		else if (strcmp(q, "noncoherent") == 0)
+			type = CAPMEM_TYPE_NONCOHERENT;
+		else
+			goto syntax;
+		len = end - start + 1;
+		r = capmem_add_range(start, len, type);
+		if (r)
+			return r;
+	}
+	return 0;
+syntax:
+	dev_err(&pdev->dev, "invalid range syntax\n");
+	return -EINVAL;
+}
+
+/*
+ * Device space is mapped out here.
+ */
+static const struct {
+	uint64_t start;
+	uint64_t len;
+} init_device_ranges[] = {
+	{ 0x00200000, 0x6fe00000 }, // 00200000...6fffffff
+};
+
+static void load_static_entries(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(init_device_ranges); i++) {
+		capmem_add_range(init_device_ranges[i].start,
+				 init_device_ranges[i].len,
+				 CAPMEM_TYPE_DEVICE);
+	}
+}
+
+/*
+ * Load ranges from device-tree (installed by u-boot):
+ * The pensando,capmem-ranges parameter is a table of 5 words per row.
+ * The table format is:
+ *	<start_hi start_lo size_hi size_lo attr>
+ *	attr is { unused:30, bypass:1, coherent:1 }
+ */
+static int load_of_ranges(struct platform_device *pdev)
+{
+	u32 entries[CAPMEM_MAX_RANGES][5];
+	int r, n, i, type;
+	u64 start, len;
+
+	n = of_property_read_variable_u32_array(pdev->dev.of_node,
+		"pensando,capmem-ranges", (u32 *)entries,
+		0, sizeof(entries) / sizeof(u32));
+	if (n < 0)
+		return -ENOENT;
+	if (n % 5 != 0) {
+		dev_err(&pdev->dev, "of pensando,capmem-ranges invalid\n");
+		return -ENODEV;
+	}
+	n /= 5;
+	for (i = 0; i < n; i++) {
+		type = (entries[i][4] & DSC_MEM_ATTR_COHERENT) ?
+			CAPMEM_TYPE_COHERENT : CAPMEM_TYPE_NONCOHERENT;
+		start = ((u64)entries[i][0] << 32) | entries[i][1];
+		len   = ((u64)entries[i][2] << 32) | entries[i][3];
+		r = capmem_add_range(start, len, type);
+		if (r)
+			return r;
+	}
+	return 0;
+}
+
+static int capmem_probe(struct platform_device *pdev)
+{
+	int r;
+
+	dev_info(&pdev->dev, "Loading capmem driver\n");
+	load_static_entries();
+	r = load_of_ranges(pdev);
+	if (r == -ENOENT) {
+		/* fallback to the capmem= variable */
+		r = parse_memory_ranges(pdev, ranges);
+		if (r)
+			return r;
+	}
+	return misc_register(&cap_mem_dev);
+}
+
+static int capmem_remove(struct platform_device *pdev)
+{
+	dev_info(&pdev->dev, "Unloading capmem driver\n");
+	misc_deregister(&cap_mem_dev);
+	return 0;
+}
+
+static const struct of_device_id capmem_of_match[] = {
+	{ .compatible = "pensando,capmem" },
+	{ /* end of table */ }
+};
+
+static struct platform_driver capmem_driver = {
+	.probe = capmem_probe,
+	.remove = capmem_remove,
+	.driver = {
+		.name = "capmem",
+		.owner = THIS_MODULE,
+		.of_match_table = capmem_of_match,
+	},
+};
+
+module_platform_driver(capmem_driver);
+MODULE_DESCRIPTION("Pensando SoC Memory Driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/soc/pensando/capmem_dev.h b/drivers/soc/pensando/capmem_dev.h
new file mode 100644
index 000000000..ac8547ee1
--- /dev/null
+++ b/drivers/soc/pensando/capmem_dev.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2018-2021, Pensando Systems Inc.
+ */
+
+#ifndef __CAPMEM_H__
+#define __CAPMEM_H__
+
+#define CAPMEM_NAME		"capmem"
+#define CAPMEM_DEV		"/dev/capmem"
+#define CAPMEM_IOCTL_NUM	0xcc
+
+struct capmem_range {
+	uint64_t	start;
+	uint64_t	len;
+	int		type;
+};
+enum {
+	CAPMEM_TYPE_DEVICE,
+	CAPMEM_TYPE_COHERENT,
+	CAPMEM_TYPE_NONCOHERENT
+};
+
+struct capmem_ranges_args {
+	struct capmem_range *range;
+	int nranges;
+};
+
+#define CAPMEM_MAX_RANGES	64
+
+#define CAPMEM_GET_NRANGES	_IOR(CAPMEM_IOCTL_NUM, 1, int)
+#define CAPMEM_GET_RANGES	_IOWR(CAPMEM_IOCTL_NUM, 2, struct capmem_ranges_args)
+
+#endif
-- 
2.39.2

