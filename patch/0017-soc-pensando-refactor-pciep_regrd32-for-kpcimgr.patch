From 750cafe56e2316b0975fcbf049bf36d7e3ed03ae Mon Sep 17 00:00:00 2001
From: Hiren Mehta <hiren@pensando.io>
Date: Tue, 17 Jan 2023 17:41:47 -0800
Subject: [PATCH 17/30] soc: pensando: refactor pciep_regrd32 for kpcimgr

Renamed pciep_regrd to pciep_regrd32 and modified to
take physical address and size as arguments.

Signed-off-by: Hiren Mehta <hiren@pensando.io>
Signed-off-by: Ashwin H <Ashwin.H@amd.com>
---
 drivers/soc/pensando/cap_pcie.c    | 44 ++++++++++++++++++------------
 drivers/soc/pensando/penpcie_dev.h |  4 ++-
 2 files changed, 30 insertions(+), 18 deletions(-)

diff --git a/drivers/soc/pensando/cap_pcie.c b/drivers/soc/pensando/cap_pcie.c
index 1a8ae97d5..3c43f56d3 100644
--- a/drivers/soc/pensando/cap_pcie.c
+++ b/drivers/soc/pensando/cap_pcie.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /*
- * Copyright (c) 2019-2021, Pensando Systems Inc.
+ * Copyright (c) 2019-2022, Pensando Systems Inc.
  */
 
 #include <linux/types.h>
@@ -108,23 +108,25 @@ static int pciep_access_end(void)
 {
 	struct pciedev_info *pi = &pciedev_info;
 
+	if (pi->pciep_access_error) {
+		pr_info_ratelimited("pcie access serror: address 0x%llx\n",
+				    pi->pciep_access_address);
+	}
 	pi->pciep_access_address = 0;
 	return pi->pciep_access_error;
 }
 
-static int pciep_valid_rw(struct pcie_rw *rw)
+static int pciep_valid_pa(const uint64_t pciepa, const uint32_t size)
 {
 	struct pciedev_info *pi = &pciedev_info;
 
 	if (!pi->pcieva)
 		return -ENXIO;
-	if (rw->pciepa < pi->pcie_base ||
-	    rw->pciepa > pi->pcie_base + pi->pcie_size ||
-	    rw->size > pi->pcie_size ||
-	    rw->pciepa + rw->size > pi->pcie_base + pi->pcie_size)
+	if (pciepa < pi->pcie_base ||
+	    pciepa > pi->pcie_base + pi->pcie_size ||
+	    size > pi->pcie_size ||
+	    pciepa + size > pi->pcie_base + pi->pcie_size)
 		return -ERANGE;
-	if (rw->size != sizeof(u32))
-		return -EINVAL;
 	return 0;
 }
 
@@ -141,44 +143,52 @@ static int pciep_valid_rw(struct pcie_rw *rw)
  * event during our pcie register access and return failure to the
  * caller, but the system continues.
  */
-static long pciep_regrd(struct pcie_rw *rw)
+int pciep_regrd32(const uint64_t pciepa, uint32_t *val)
 {
 	struct pciedev_info *pi = &pciedev_info;
-	uint32_t v;
 	int r;
+	unsigned long flags;
 
-	r = pciep_valid_rw(rw);
+	r = pciep_valid_pa(pciepa, sizeof(u32));
 	if (r)
 		return r;
 
-	spin_lock(&pi->pciep_access_lock);
-	pciep_access_begin(rw->pciepa);
+	spin_lock_irqsave(&pi->pciep_access_lock, flags);
+	pciep_access_begin(pciepa);
 
-	v = pcie_readl(rw->pciepa);
+	*val = pcie_readl(pciepa);
 	asm volatile("msr daifclr, #4" ::: "memory"); /* unmask async SError */
 	dsb(sy);		/* sync in-flight ld/st */
 	isb();
 
 	r = pciep_access_end();
-	spin_unlock(&pi->pciep_access_lock);
+	spin_unlock_irqrestore(&pi->pciep_access_lock, flags);
 	if (r)
 		return -EIO;
 
-	return copy_to_user(rw->rdvalp, &v, sizeof(v));
+	return 0;
 }
+EXPORT_SYMBOL_GPL(pciep_regrd32);
 
 static long pcie_unlocked_ioctl(struct file *file,
 		unsigned int cmd, unsigned long arg)
 {
 	void __user *p = (void __user *)arg;
 	struct pcie_rw rw;
+	uint32_t val;
+	int r;
 
 	switch (cmd) {
 
 	case PCIE_PCIEP_REGRD:
 		if (copy_from_user(&rw, p, sizeof(rw)))
 			return -EFAULT;
-		return pciep_regrd(&rw);
+		if (rw.size != sizeof(u32))
+			return -EINVAL;
+		r = pciep_regrd32(rw.pciepa, &val);
+		if (r)
+			return r;
+		return copy_to_user(rw.rdvalp, &val, sizeof(val));
 
 	default:
 		return -ENOTTY;
diff --git a/drivers/soc/pensando/penpcie_dev.h b/drivers/soc/pensando/penpcie_dev.h
index aba906adb..5426d2edf 100644
--- a/drivers/soc/pensando/penpcie_dev.h
+++ b/drivers/soc/pensando/penpcie_dev.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
- * Copyright (c) 2020-2021, Pensando Systems Inc.
+ * Copyright (c) 2020-2022, Pensando Systems Inc.
  */
 
 #ifndef __PENPCIE_DEV_H__
@@ -21,4 +21,6 @@ struct pcie_rw {
 #define PCIE_IOCTL_NUM		'P'
 #define PCIE_PCIEP_REGRD	_IOWR(PCIE_IOCTL_NUM, 1, struct pcie_rw)
 
+int pciep_regrd32(const uint64_t pciepa, uint32_t *val);
+
 #endif
-- 
2.17.1

